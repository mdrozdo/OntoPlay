# Routes
# This file defines all application routes (Higher priority routes first)
# ~~~~


# Module routes
GET /api/constraints/condition ontoplay.controllers.Constraints.condition(conditionId : Int, classUri: String)
GET /api/constraints/individual ontoplay.controllers.Constraints.individual(conditionId : Int, classUri: String)
GET /api/constraints/getValueCondition ontoplay.controllers.Constraints.getValueCondition(conditionId : Int, classUri: String, propertyUri : String, operator : String)
GET /api/constraints/getPropertyCondition ontoplay.controllers.Constraints.getPropertyCondition(conditionId: Integer, classUri: String, propertyUri: String)
GET /api/individuals/getPropertyCondition ontoplay.controllers.Individuals.getPropertyCondition(conditionId: Integer, classUri: String, propertyUri: String)



# Javascript routing
GET    /assets/javascripts/ontoplay/routes      ontoplay.controllers.Constraints.javascriptRoutes()

# Ontology configuration
GET /uploadOntology  ontoplay.controllers.configuration.UploadController.showUploadPage()
POST /uploadOntology ontoplay.controllers.configuration.UploadController.upload()

#Annotations configuration
GET /annotation/configuration/show ontoplay.controllers.configuration.AnnotationController.showAnnotationCFPage()
GET /annotation/configuration/getAnnotations ontoplay.controllers.configuration.AnnotationController.getAnnotationForCFPage()
GET /annotation/configuration/getComponenets   ontoplay.controllers.configuration.AnnotationController.getOntologyComponents()
GET /annotation/configuration/getRelations/:annotationIri ontoplay.controllers.configuration.AnnotationController.getRelationsByAnnotationIri(annotationIri: String)
POST /annotation/configuration/addRelation 							ontoplay.controllers.configuration.AnnotationController.AddRelation()
POST /annotation/configuration/deleteRelation 							ontoplay.controllers.configuration.AnnotationController.deleteRelation()
POST /annotation/configuration/deleteAllRelations 							ontoplay.controllers.configuration.AnnotationController.deleteAllRelations()


#properties
GET /api/properties/class/:className 		ontoplay.controllers.webservices.Properties.getPropertiesByClassName(className: String)
GET /api/properties/operators/:propertyUrl/:isDescriptionOfIndividual ontoplay.controllers.webservices.Operators.getOpertors(propertyUrl: String,isDescriptionOfIndividual: Boolean)

#annotations
GET /api/annotationProperties/get/:componentUri ontoplay.controllers.webservices.Annotations.getAnnotationPropertyByUri(componentUri: String)


#classes
GET /api/class/property/:propertyUri		ontoplay.controllers.webservices.Classes.getClassesByProperty(propertyUri: String)
GET /api/class		                        ontoplay.controllers.webservices.Classes.getClasses()
POST /api/class/save                        ontoplay.controllers.webservices.Classes.addClassExpression()
GET /addClassExpression/:className		ontoplay.controllers.Operations.addClassExpression(className: String)
GET /addClassMapping/:className		ontoplay.controllers.Operations.addClassMapping(className: String)
GET /addClassMappingReact/:className		ontoplay.controllers.Operations.addClassMappingReact(className: String)

#individuals
GET /api/individuals/class/:className ontoplay.controllers.webservices.Individuals.getIndividualsByClassName(className: String)
POST /api/individuals/save ontoplay.controllers.webservices.Individuals.addIndividual()
GET /api/individuals/data/:individualName ontoplay.controllers.webservices.Individuals.getIndividualData(individualName: String)
GET /add/:className			ontoplay.controllers.Operations.add(className: String)
GET /addReact/:className			ontoplay.controllers.Operations.addReact(className: String)
GET /api/individuals/update/:className/:individualName ontoplay.controllers.Operations.update(className: String,individualName: String)
GET /api/individuals/remove/:individualName ontoplay.controllers.webservices.Individuals.deleteIndividualByName(individualName: String)


# Map static resources from the /public folder to the /assets URL path
GET     /ontoplay_assets/*file               ontoplay.controllers.Assets.at(path="/public/lib/ontoplay", file)

